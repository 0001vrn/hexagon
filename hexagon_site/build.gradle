
buildscript {
    repositories { jcenter() }

    dependencies {
        classpath("com.fasterxml.jackson.core:jackson-databind:2.9.8")
        classpath("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8")
    }
}

project.ext.configData = loadSiteData(project.file("site.yaml"))

apply(from: "../gradle/site.gradle")
apply(from: "../gradle/icons.gradle")

clean {
    delete("content")
}

tasks.bake.doFirst {

    final String contentTarget = project.file("content").absolutePath

    copy {
        from project.file('pages')
        into contentTarget
    }

    final Set<Project> modules = rootProject.subprojects
    final List<String> dirs = modules.collect { "$it.name/build/dokka" } as List<String>

    copy {
        dirs.each { dir -> from rootProject.file(dir) }
        into contentTarget
    }

    final String frontMatter = """
        title=Hexagon
        date=2016-04-13
        type=page
        status=published
        ~~~~~~
    """

    fileTree(dir: contentTarget, include: "**/*.md").each { fcd ->
        final String content = fcd.text
        fcd.text = frontMatter.stripIndent() + content
    }

    fileTree(dir: "$contentTarget", include: "**/*.md").each { fcd ->
        final String content = fcd.text
        final String title = "[. a-zA-Z_\\-]"
        final String link = "[./a-zA-Z_\\-]"
        final String regex = /\[($title*)]\(($link*)\.md\)/
        final String replacement = '[$1]($2.html)'
        final String output = content.replaceAll(regex, replacement)

        fcd.text = output
    }
}

site.dependsOn (
    rootProject.getTasksByName("dokka", true).toArray() +
    rootProject.getTasksByName("jacocoTestReport", true).toArray()
)

task serve(dependsOn: "site") {
    doLast {
        exec {
            commandLine("ruby", "-run", "-ehttpd", bake.output.absolutePath, "-p8888")
        }
    }
}

task moduleSettings {
    doLast {
        rootProject.subprojects { module ->
            println """
                ${module.name}
                ---------- 
                API: ${hasApi(module)}
                PORT NAME: ${portName(module)}
            """
        }
    }
}

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory

private Map<String, ?> loadSiteData(final File yamlFile) {
    Map<String, ?> config = loadYaml(yamlFile)
    // TODO Add ports and adapters
    return config
}

private static Map<String, ?> loadYaml(final File yamlFile) {
    final ObjectMapper mapper = new ObjectMapper(new YAMLFactory())
    return mapper.readValue(yamlFile, Map.class)
}

private static boolean hasApi(final Project module) {
    return module.file("build/dokka").exists ()
}

private static String portName(final Project module) {
    return module.name.startsWith("port_") ? module.name - "port_" : ""
}
