
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.regex.Matcher

buildscript {
    repositories { jcenter() }

    dependencies {
        classpath("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
        classpath("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    }
}

project.ext.configData = SiteKt.loadYaml(project.file("site.yaml"))

apply(from: "../gradle/site.gradle")
apply(from: "../gradle/icons.gradle")

clean {
    delete("build", "content")
}

task("checkDocumentation") {
    doFirst {
        def readme = new FileRange(rootProject.file("readme.md"), 148, 173)
        def service = new FileRange(rootProject.file("hexagon_starters/src/main/kotlin/Service.kt"))
        SiteKt.checkDocumentationCode(readme, service)
    }
}

bake {
    dependsOn("checkDocumentation")

    doFirst {
        final String contentTarget = project.file("content").absolutePath
        final Set<Project> modules = rootProject.subprojects
        final List<String> dirs = modules.collect { "$it.name/build/dokka" } as List<String>
        final ConfigurableFileTree markdownFiles = fileTree(dir: contentTarget, include: "**/*.md")

        copy {
            from(project.file('pages'))
            dirs.each { dir -> from(rootProject.file(dir)) }
            into(contentTarget)
        }

        markdownFiles.each { File markdownFile ->
            String content = markdownFile.text

            // Add front matter
            final String frontMatter = """
                title=${markdownFile.name.tr("_", " ").capitalize() - ".md"}
                date=${LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE)}
                fileName=${markdownFile.name}
                type=page
                status=published
                ~~~~~~
            """

            content = frontMatter.stripIndent() + content

            // Fix links
            final String title = "[. a-zA-Z_\\-]"
            final String link = "[./a-zA-Z_\\-]"
            content = content.replaceAll(/\[($title*)]\(($link*)\.md\)/, '[$1]($2.html)')

            // Insert samples code
            final String regex = /@sample (.*)/
            final Matcher samples = content =~ regex

            samples.findAll().each { sample ->
                String sampleLocation = sample[1].trim()
//                FileRange sampleRange = FileRange.parse(markdownFile, sampleLocation)
//                String replacement = "```kotlin\n" + sampleRange.lines().join("\n") + "\n```"
//                content = content.replaceAll("@sample $sampleLocation", replacement)
            }

            markdownFile.text = content
        }
    }
}

site.dependsOn(rootProject.getTasksByName("dokka", true).toArray())
