
// TODO Add `serve` task to start an HTTP server with `build` contents
// JBake 'content' folder can not be changed (it seems a bug)

ext.siteSource = '.'
ext.siteHost = 'http://hexagonkt.com'

ext.logoSmall = 'assets/img/logo.svg'
ext.logoWide = 'assets/img/logo_wide.svg'
ext.logoLarge = 'assets/img/logo.svg'

ext.configData = [
    bootstrapVersion : '3.3.7',
    jqueryVersion : '3.2.1',
    highlightVersion : '9.12.0',
    theme : 'flatly', // also 'paper' or 'cerulean'
    cloudflare : 'http://cdnjs.cloudflare.com/ajax/libs',
    author : 'Juanjo Aguililla',
    authorMail : 'juanjoaguililla@gmail.com',
    keywords : 'Hexagon\\, microservices\\, Kotlin\\, RabbitMQ\\, MongoDB\\, JVM\\, Web',

    longDescription : '''
        Hexagon is a microservices library written in Kotlin. Its purpose is to ease the building
        of services (Web applications\\, APIs or queue consumers) that run inside a cloud platform
    ''',

    twitterUser : 'hexagon_kt',
    githubRepo : 'hexagonkt/hexagon',
    slackChannel : 'https://kotlinlang.slack.com/messages/hexagon',
    bintrayRepo : 'jamming/maven/hexagon_core',

    siteColor : '#135AA1',
    siteLogoDark : '#0073BB',
    siteLogoLight : '#2B9EE6',
    siteBackgroundDark : '#31415C',
    siteBackgroundLight : '#546691',
    siteAccentColor : '#2B9EE6',

    menu : [
        'Quick Start' : '/quick_start.html',
        'Guides' : '/guides.html',
        'API' : '/api.html'
    ],

    features1 : [
        [
            link : 'http://hexagonkt.com',
            icon : 'handshake-o',
            title : 'Simple to Use',
            description : ''
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'space-shuttle',
            title : 'Easy to Hack',
            description : ''
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'trophy',
            title : 'Well Tested',
            description : 'TechEmpower benchmark passed, coverage and code beat'
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'umbrella',
            title : 'Pluggable Adapters',
            description : 'UI friendly response times, instant writes at high volume. CHANGED'
        ]
    ],

    features2 : [
        [
            link : 'http://hexagonkt.com',
            icon : 'handshake-o',
            title : 'Kotlin First',
            description : ''
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'space-shuttle',
            title : 'Modular',
            description : 'Use only modules you need only required libs are CORE, SLF4J and Jackson'
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'trophy',
            title : 'Documented TODO',
            description : ''
        ],
        [
            link : 'http://hexagonkt.com',
            icon : 'umbrella',
            title : 'Examples TODO',
            description : ''
        ]
    ]
]

apply plugin: 'org.ajoberstar.git-publish'
apply from: '../gradle/site.gradle'
apply from: '../gradle/icons.gradle'

clean {
    delete 'build', 'content', 'out'
}

gitPublishPush.dependsOn 'site'

gitPublish {
    final String grgitUser = System.getenv ('GRGIT_USER') ?: 'user'
    final String grgitPass = System.getenv ('GRGIT_PASS') ?: 'pass'

    repoUri = "https://$grgitUser:$grgitPass@github.com/hexagonkt/hexagon.git"
    branch = 'gh-pages'

    contents {
        from buildDir
    }
}

tasks.jbake.doFirst {
    final String frontMatter =
        '''title=Hexagon\ndate=2016-04-13\ntype=page\nstatus=published\n~~~~~~\n'''
    final String contentTarget = projectDir.absolutePath + '/content'

    copy {
        from rootProject.file('hexagon_site/pages')
        into contentTarget
    }

    final List<String> dirs = rootProject.subprojects.collect { "$it.name/build/dokka" }

    copy {
        dirs.each { dir -> from rootProject.file(dir) }
        into contentTarget + '/api'
    }

    fileTree(dir: contentTarget, include: '**/*.md').each { fcd ->
        final String content = fcd.text
        fcd.text = frontMatter + content
    }

    fileTree(dir: "$contentTarget/api", include: '**/*.md').each { fcd ->
        final String content = fcd.text
        final String title = '[. a-zA-Z_\\-]'
        final String link = '[./a-zA-Z_\\-]'
        final String regex = /\[($title*)]\(($link*)\.md\)/
        final String replacement = '[$1]($2.html)'
        final String output = content.replaceAll (regex, replacement)

        fcd.text = output
    }
}

site.dependsOn (
    rootProject.getTasksByName ('dokka', true).toArray () +
    rootProject.getTasksByName ('jacocoTestReport', true).toArray ()
)

class HexagonModule {
    private static final List<String> infrastructureModules =
        [ 'benchmark', 'site', 'starters' ].collect { "hexagon_$it" }
    // TODO Handle not port modules (rest, scheduler, test)

    public String moduleName
    public File moduleRoot

    public boolean isPort() { return moduleName.startsWith ('hexagon_') && !isInfrastrucure () }
    public boolean isInfrastrucure() { return moduleName in infrastructureModules }
    public boolean isAdapter() { return !isPort () && !isInfrastrucure () }
    public boolean hasReadme() { return file(moduleRoot.absolutePath + '/readme.md').exists () }
    public String portName() { return moduleName.split ('_')[isAdapter ()? 0 : 1] }
    public String adapterName() { return moduleName.split ('_')[isAdapter ()? 1 : 0] }
}

private static List<HexagonModule> portsAndAdapters () {
    return []
}
