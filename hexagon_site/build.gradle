
buildscript {
    repositories { jcenter() }

    dependencies {
        classpath("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
        classpath("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    }
}

project.ext.configData = loadYaml(project.file("site.yaml"))

apply(from: "../gradle/site.gradle")
apply(from: "../gradle/icons.gradle")

clean {
    delete("content")
}

tasks.bake.doFirst {

    final String contentTarget = project.file("content").absolutePath

    copy {
        from project.file('pages')
        into contentTarget
    }

    final Set<Project> modules = rootProject.subprojects
    final List<String> dirs = modules.collect { "$it.name/build/dokka" } as List<String>

    copy {
        dirs.each { dir -> from rootProject.file(dir) }
        into contentTarget
    }

    fileTree(dir: contentTarget, include: "**/*.md").each { fcd ->
        final String frontMatter = """
            title=Hexagon ${fcd.name.tr("_", " ").capitalize() - ".md"}
            date=${LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE)}
            fileName=${fcd.name}
            type=page
            status=published
            ~~~~~~
        """
        fcd.text = frontMatter.stripIndent() + fcd.text
    }

    fileTree(dir: "$contentTarget", include: "**/*.md").each { fcd ->
        final String content = fcd.text
        final String title = "[. a-zA-Z_\\-]"
        final String link = "[./a-zA-Z_\\-]"
        final String regex = /\[($title*)]\(($link*)\.md\)/
        final String replacement = '[$1]($2.html)'
        final String output = content.replaceAll(regex, replacement)

        fcd.text = output
    }
}

site.dependsOn (rootProject.getTasksByName("dokka", true).toArray())

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle

private static Map<String, ?> loadYaml(final File yamlFile) {
    final ObjectMapper mapper = new ObjectMapper(new YAMLFactory())
    return mapper.readValue(yamlFile, Map.class)
}
