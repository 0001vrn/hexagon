
project.ext.configData = {
    final String helloWorld = "http_server_jetty/src/test/kotlin/com/hexagonkt/http/HelloWorld.kt"
    final File site = project.file("site.yaml")
    final Map<Object, Object> configData = SiteKt.loadYaml(site) as Map<Object, Object>
    configData["readmeCode"] = rootProject.file(helloWorld).text
    return configData
}()

apply(from: "../gradle/jbake.gradle")
apply(from: "../gradle/icons.gradle")

clean {
    delete("build", "content")
}

task("checkDocumentation") {
    doFirst {
        final File readme = rootProject.file("README.md")
        final String examples =
            "port_http_server/src/test/kotlin/com/hexagonkt/http/server/examples"

        Map<FileRange, FileRange> fileRanges = [
            (new FileRange(readme, "hello")):
                new FileRange(rootProject.file("hexagon_starters/src/main/kotlin/Service.kt")),

            (new FileRange(readme, "books")):
                new FileRange(rootProject.file("$examples/BooksTest.kt"), "books"),

            (new FileRange(readme, "session")):
                new FileRange(rootProject.file("$examples/SessionTest.kt"), "session"),

            (new FileRange(readme, "cookies")):
                new FileRange(rootProject.file("$examples/CookiesTest.kt"), "cookies"),

            (new FileRange(readme, "errors")):
                new FileRange(rootProject.file("$examples/ErrorsTest.kt"), "errors"),

            (new FileRange(readme, "filters")):
                new FileRange(rootProject.file("$examples/FiltersTest.kt"), "filters"),

            (new FileRange(readme, "files")):
                new FileRange(rootProject.file("$examples/FilesTest.kt"), "files")
        ]

        fileRanges.each { SiteKt.checkDocumentationCode(it.key, it.value) }
    }
}

bake {
    dependsOn("checkDocumentation")

    doFirst {
        final String contentTarget = project.file("content").absolutePath
        final Set<Project> modules = rootProject.subprojects
        final List<String> dirs = modules.collect { "$it.name/build/dokka" } as List<String>
        final ConfigurableFileTree markdownFiles = fileTree(dir: contentTarget, include: "**/*.md")

        copy {
            from(project.file('pages'))
            dirs.each { dir -> from(rootProject.file(dir)) }
            into(contentTarget)
        }

        markdownFiles.each { File markdownFile ->

            String content = markdownFile.text

            content = SiteKt.addFrontMatter(markdownFile, content)
            content = SiteKt.fixLinks(content)
            content = SiteKt.insertSamplesCode(rootProject.projectDir, content)

            markdownFile.text = content
        }
    }
}

bake.dependsOn(rootProject.getTasksByName("dokka", true).toArray())

task("mkdocs") {
    dependsOn("checkDocumentation")

    doFirst {
        final String contentTarget = project.file("content").absolutePath
        final Set<Project> modules = rootProject.subprojects
        final List<String> dirs = modules.collect { "$it.name/build/dokka" } as List<String>
        final ConfigurableFileTree markdownFiles = fileTree(dir: contentTarget, include: "**/*.md")

        copy {
            from(project.file('pages'))
            from(project.file('assets'))
            dirs.each { dir -> from(rootProject.file(dir)) }
            into(contentTarget)
        }

        markdownFiles.each { File markdownFile ->
            String content = markdownFile.text
            content = SiteKt.insertSamplesCode(rootProject.projectDir, content)
            markdownFile.text = content
        }
    }
}

mkdocs.dependsOn(rootProject.getTasksByName("dokka", true).toArray())
