
import static java.lang.System.getenv

apply(from: "../gradle/kotlin.gradle")
apply(from: "../gradle/junit.gradle")
//apply(from: "../gradle/bintray.gradle")

dependencies {
    implementation(project(":http_server_jetty"))
    implementation(project(":http_client_ahc"))
}

// This is required because of a flaw in this Gradle plugin :/
clean {
    doLast { setupTemplate() }
}

task("processTemplate") {
    // This must be done in *CONFIGURATION* phase because of a flaw in this Gradle plugin :/
    setupTemplate()

    final Map<String, ?> stringProperties = project.getProperties()
        .findAll { it.value instanceof String }

    listTemplateDirectoryNames().forEach { dir ->
        copy {
            from("$projectDir/$dir".toString())
            into("$buildDir/$dir".toString())
            filter {
                String content = it

                stringProperties.entrySet().forEach { entry ->
                    final String entryValue = entry.value.toString()
                    content = content.replace("\${project.${entry.key}}".toString(), entryValue)
                }

                content
            }
        }

        copy {
            from("$projectDir/src".toString())
            into("$buildDir/$dir/src".toString())
        }

        copy {
            from("$rootDir/gradle/wrapper".toString())
            into("$buildDir/$dir/gradle/wrapper".toString())
        }

        copy {
            from(rootDir.toString())
            into("$buildDir/$dir".toString())
            include("gradlew", "gradlew.bat", ".editorconfig")
        }

        file("$buildDir/$dir/gradle.properties".toString()).text = """
            name=\${projectName}
            version=\${version}
            group=\${group}
            description=\${description}

            gradleScripts=https://raw.githubusercontent.com/hexagonkt/hexagon/$rootProject.version/gradle

            kotlinVersion=$kotlinVersion
            kotlinCoroutinesVersion=$kotlinCoroutinesVersion
            hexagonVersion=$rootProject.version
            jettyVersion=$jettyVersion
            logbackVersion=$logbackVersion

            junitVersion=$junitVersion
        """.stripIndent()
    }
}

//packageAllTemplates.dependsOn("build", "processTemplate")
//installAllTemplates.dependsOn("packageAllTemplates")

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from(components.java)
//
//            artifact(sourceJar) // To be accepted in JCenter, the package need to include sources
//            artifact(testJar)
//        }
//    }
//}

private void setupTemplate() {
    listTemplateBuildDirectories().forEach {
        mkdir(it)
        file("$it/VERSION".toString()).text = rootProject.version
    }
}

private List<String> listTemplateDirectoryNames() {
    return listTemplateDirectories().collect { it.name }
}

private List<String> listTemplateBuildDirectories() {
    return listTemplateDirectories().collect { "$buildDir/$it.name".toString() }
}

private List<File> listTemplateDirectories() {
    return projectDir
        .listFiles({ File f -> f.isDirectory() && f.name.startsWith("hexagon-") } as FileFilter)
}
