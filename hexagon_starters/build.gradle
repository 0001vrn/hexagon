
import static java.lang.System.getenv

apply(from: "../gradle/kotlin.gradle")

apply(plugin: "uk.co.cacoethes.lazybones-templates")

dependencies {
    compile(project(":server_jetty"))
    compile(project(":port_client"))

    testCompile("junit:junit:$junitVersion".toString())
}

lazybones {
    final String btUser = findProperty("bintrayUser") ?: getenv("BINTRAY_USER") ?: "anonymous"
    final String btKey = findProperty("bintrayKey") ?: getenv("BINTRAY_KEY") ?: "anonymous"
    final List<String> templateDirs = listTemplateBuildDirectories()

    repositoryName = "$btUser/maven"
    publish = true

    setRepositoryUsername(btUser.toString () ?: "anonymous")
    setRepositoryApiKey(btKey.toString () ?: "anonymous")

    licenses = [ "MIT" ]
    setTemplateDirs(files(templateDirs))
}

// This is required because of a flaw in this Gradle plugin :/
clean {
    doLast {
        listTemplateBuildDirectories().forEach {
            mkdir(it)
            new File("$it/VERSION").text = rootProject.version
        }
    }
}

// TODO Replace version in template `gradle.properties`
// TODO Copy it to the template before generating it.
task processTemplate {
    // This must be done in *CONFIGURATION* phase because of a flaw in this Gradle plugin :/
    listTemplateDirectoryNames().forEach { dir ->
        copy {
            from("$projectDir/$dir".toString())
            into("$buildDir/hexagon-service".toString())
        }

        copy {
            from("$rootDir/gradle/wrapper".toString())
            into("$buildDir/$dir/gradle/wrapper".toString())
        }

        copy {
            from(rootDir.toString())
            into("$buildDir/$dir".toString())
            include("gradlew", "gradlew.bat", ".editorconfig")
        }

        new File("$buildDir/$dir/VERSION").text = rootProject.version
    }
}

packageAllTemplates.dependsOn("processTemplate")

private List<String> listTemplateDirectoryNames() {
    return listTemplateDirectories().collect { it.name }
}

private List<String> listTemplateBuildDirectories() {
    return listTemplateDirectories().collect { "$buildDir/$it.name".toString() }
}

private List<File> listTemplateDirectories() {
    return projectDir
        .listFiles({ File f -> f.isDirectory() && f.name.startsWith("hexagon-") } as FileFilter)
}
