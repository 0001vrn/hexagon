
import static java.lang.System.getenv

apply(from: "../gradle/kotlin.gradle")

apply(plugin: "uk.co.cacoethes.lazybones-templates")

dependencies {
    compile(project(":http_server_jetty"))
    compile(project(":port_http_client"))

    testCompile("junit:junit:$junitVersion".toString())
}

lazybones {
    final String btUser = findProperty("bintrayUser") ?: getenv("BINTRAY_USER") ?: "anonymous"
    final String btKey = findProperty("bintrayKey") ?: getenv("BINTRAY_KEY") ?: "anonymous"
    final String btRepo = findProperty("bintrayRepo") ?: "maven"
    final List<String> templateDirs = listTemplateBuildDirectories()

    repositoryName = "$btUser/$btRepo"
    publish = true

    setRepositoryUsername(btUser.toString ())
    setRepositoryApiKey(btKey.toString ())

    licenses = project.findProperty("licenses").toString().split(",").collect {it.trim()}
    setTemplateDirs(files(templateDirs))
}

// This is required because of a flaw in this Gradle plugin :/
clean {
    doLast { setupTemplate() }
}

task processTemplate {
    // This must be done in *CONFIGURATION* phase because of a flaw in this Gradle plugin :/
    setupTemplate()
    
    final Map<String, ?> stringProperties = project.getProperties()
        .findAll { it.value instanceof String }

    listTemplateDirectoryNames().forEach { dir ->
        copy {
            from("$projectDir/$dir".toString())
            into("$buildDir/$dir".toString())
            filter {
                String content = it

                stringProperties.entrySet().forEach { entry ->
                    content = content.replace("\${project.${entry.key}}", entry.value.toString())
                }

                content
            }
        }

        copy {
            from("$projectDir/src".toString())
            into("$buildDir/$dir/src".toString())
        }

        copy {
            from("$rootDir/gradle/wrapper".toString())
            into("$buildDir/$dir/gradle/wrapper".toString())
        }

        copy {
            from(rootDir.toString())
            into("$buildDir/$dir".toString())
            include("gradlew", "gradlew.bat", ".editorconfig")
        }
        
        file("$buildDir/$dir/gradle.properties".toString()).text = """
            name=\${projectName}
            version=\${version}
            group=\${group}
            description=\${description}

            gradleScripts=https://raw.githubusercontent.com/hexagonkt/hexagon/$rootProject.version/gradle

            kotlinVersion=$kotlinVersion
            kotlinCoroutinesVersion=$kotlinCoroutinesVersion
            hexagonVersion=$rootProject.version
            jettyVersion=$jettyVersion
            logbackVersion=$logbackVersion

            junitVersion=$junitVersion
        """.stripIndent()
    }
}

packageAllTemplates.dependsOn("build", "processTemplate")
installAllTemplates.dependsOn("packageAllTemplates")

private void setupTemplate() {
    listTemplateBuildDirectories().forEach {
        mkdir(it)
        file("$it/VERSION".toString()).text = rootProject.version
    }
}

private List<String> listTemplateDirectoryNames() {
    return listTemplateDirectories().collect { it.name }
}

private List<String> listTemplateBuildDirectories() {
    return listTemplateDirectories().collect { "$buildDir/$it.name".toString() }
}

private List<File> listTemplateDirectories() {
    return projectDir
        .listFiles({ File f -> f.isDirectory() && f.name.startsWith("hexagon-") } as FileFilter)
}
