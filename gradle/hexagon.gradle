
ext.getProperty = { String name, String value ->
    project.hasProperty (name)? project.property (name) : value
}

ext.dokkaVersion = getProperty ('dokkaVersion', '0.9.+')
ext.kotlinVersion = getProperty ('kotlinVersion', '1.0.+')
ext.ratpackVersion = getProperty ('ratpackVersion', '1.3.+')
ext.testngVersion = getProperty ('testngVersion', '6.9.+')
ext.mockitoVersion = getProperty ('mockitoVersion', '1.10.+')

ext.gradleScripts = getProperty ('gradleScripts', 'https://raw.githubusercontent.com/jaguililla/hexagon/master/gradle')
ext.wrapperGradleVersion = getProperty ('wrapperGradleVersion', '2.13')
ext.filterPatterns = getProperty ('filterPatterns', '*.properties, *.txt, *.xml')
ext.hexagonVersion = getProperty ('hexagonVersion', '0.2.+')

apply from: "$gradleScripts/kotlin.gradle"

apply plugin: 'kotlin2js'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile "co.there4:hexagon:$hexagonVersion"

    testCompile "co.there4:hexagon:$hexagonVersion:test"
    testCompile "io.ratpack:ratpack-test:$ratpackVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}

ext.serviceScript = """
#!/usr/bin/env bash

SERVICE_NAME="${project.name}"
SERVICE_VERSION="${project.version}"
SERVICE_PATH=\$(dirname \$0)
SERVICE_PID="/tmp/.\$SERVICE_NAME-\$SERVICE_VERSION.pid"

log () {
  echo "\$SERVICE_NAME (\$SERVICE_VERSION) \$1"
}

case \$1 in
  start)
    if [ ! -f \$SERVICE_PID ]; then
      log "starting..."
      nohup \$SERVICE_PATH/bin/\$SERVICE_NAME 2>> /dev/null >> /dev/null &
      echo \$! > \$SERVICE_PID
      log "started"
    else
      log "is already running"
    fi
  ;;
  stop)
    if [ -f \$SERVICE_PID ]; then
      log "stopping..."
      PID=\$(cat \$SERVICE_PID)
      kill \$PID
      log "stopped"
      rm \$SERVICE_PID
    else
      log "is not running"
    fi
  ;;
  restart)
    if [ -f \$SERVICE_PID ]; then
      \$SERVICE_PATH/service stop
      \$SERVICE_PATH/service start
    else
      log "is not running"
    fi
  ;;
esac
"""

installShadowApp.destinationDir = file ("$buildDir/${project.name}-$version")
installShadowApp.doLast {
    file("${installShadowApp.destinationDir}/service") << serviceScript
}
