/*
 * To deploy on Bintray you need to set 'bintrayUser' and 'bintrayKey' in
 * '~/.gradle/gradle.properties'.
 *
 * You should also set 'bintrayUrl' in the project's 'gradle.properties' file.
 *
 * NOTE: For the package to be accepted in JCenter, you need to include sources
 * (sourceJar task).
 */

buildscript {
    repositories {
        jcenter ()
    }

    dependencies {
        classpath "org.ajoberstar:gradle-git:$gradlegitVersion"
        classpath "com.squareup.okhttp3:okhttp:$okhttpVersion"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.github-pages'

ext.getProperty = { String name, String value ->
    project.hasProperty (name)? project.property (name) : value
}

ext.bintrayUser = getProperty ("bintrayUser", "anonymous")
ext.bintrayKey = getProperty ("${project.name}BintrayKey", "anonymous")

configurations {
    deployerJars
}

task sourceJar (type: Jar) {
    from sourceSets.main.allJava
}

task packageTest (type: Jar) {
    from sourceSets.test.output
}

githubPages {
    repoUri = githubUrl
    pages {
        from (file ("$buildDir/$projectSite")) {
            into '.'
        }
    }
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact packageTest {
                classifier 'test'
            }
        }
    }

    repositories {
        maven {
            url bintrayUrl
            credentials {
                username bintrayUser
                password bintrayKey
            }
        }
    }
}

publish.dependsOn 'checkRepository'

task checkRepository () {
    org.ajoberstar.grgit.Grgit repository = org.ajoberstar.grgit.Grgit.open (file ('.'))

    if (!repository.status ().clean)
        throw new GradleException ("Repository not clean")

    repository.pull (remote: "origin", branch: "master")

    if (!repository.status ().clean)
        throw new GradleException ("Repository not clean")
}

publish.doLast {
    String bintrayApi = "https://api.bintray.com/content"
    post (
        httpClient (bintrayUser, bintrayKey),
        "$bintrayApi/jamming/maven/Hexagon/$version/publish",
        "application/json"
    )
}

import static okhttp3.MediaType.parse
import static groovy.json.JsonOutput.toJson
import static okhttp3.Credentials.basic
import static HttpMethod.*

import okhttp3.OkHttpClient
import okhttp3.RequestBody
import okhttp3.Request

enum HttpMethod { GET, PUT, POST, DELETE }

private OkHttpClient httpClient (String username = "", String password = "") {
    username != null && !username.empty?
        new OkHttpClient.Builder ()
            .authenticator { route, response ->
                response.request ().newBuilder ()
                    .header ("Authorization", basic (username, password))
                    .build ()
            }
            .build () :
        new OkHttpClient ()
}

private void http (
    OkHttpClient client, HttpMethod method, String url, String type, Object content) {

    RequestBody body = RequestBody.create(
        parse("$type; charset=utf-8"),
        type.contains ("json")? toJson (content) : content.toString ()
    )

    Request.Builder request = new Request.Builder().url(url)

    switch (method) {
        case POST:
            request = request.post (body)
            break
        case PUT:
            request = request.put (body)
            break
        case GET:
        default:
            request = request.get (body)
    }

    assert client.newCall(request.build ()).execute().code in 200..300
}

private void post (
    OkHttpClient client = httpClient (),
    String url,
    String type = "text/plain",
    Object content = "") {

    http (client, POST, url, type, content)
}

private void put (
    OkHttpClient client = httpClient (), String url, String type = "text/plain", Object content) {

    http (client, PUT, url, type, content)
}
