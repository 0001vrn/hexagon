
apply plugin: 'org.jbake.site'

// Generate service documentation site
// To generate clean URLs, add the following settings:
//    configuration['uri.noExtension'] = true
//    configuration['uri.noExtension.prefix'] = '/'
bake {
    String siteHost = findProperty ('siteHost') ?: ''
    Map<String, ?> configData = findProperty ('configData') as Map<String, Object> ?: [:]

    input = projectDir
    output = project.buildDir
    version  = findProperty ('jbakeVersion') ?: '2.6.1'

    configuration['site.host'] = siteHost

    configuration['render.index'] = file("$projectDir/templates/index.ftl").exists()
    configuration['render.tags'] = false
    configuration['render.archive'] = false
    configuration['render.feed'] = false
    configuration['render.sitemap'] = true

    configuration['markdown.extensions'] = 'ALL,-HARDWRAPS,-AUTOLINKS,-EXTANCHORLINKS'

    // Custom properties
    configuration['projectName'] = rootProject.name // Applied in templates, not content
    configuration['projectDescription'] = rootProject.description
    configuration['projectVersion'] = rootProject.version.toString()
    configuration['projectGroup'] = rootProject.group.toString ()
    configuration['siteHost'] = configuration['site.host']

    // Custom extra data
    configData.each { entry ->
        configuration[entry.key] = entry.value
    }
}

// Site processing is required because JBake does not filter content with configuration properties
task site (dependsOn: 'bake') {
    doLast {
        file (buildDir).traverse (nameFilter: ~/.+\.(html|xml|css|svg)$/) {
            filterFile (it, bake.configuration)
        }
    }
}

private static void filterFile (final File file, final Map<?, ?> data) {
    String text = file.getText ()

    data.each { entry ->
        text = text.replace ("\${$entry.key}", entry.value.toString ())
    }

    file.write (text)
}
