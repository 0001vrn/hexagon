/*
 * To apply this script, you need to add the JBake plugin manually at the top of your build script
 * as that is not possible in included scripts like this one. These are the required lines to do so:
 *
 * buildscript {
 *     repositories {
 *         jcenter ()
 *         mavenCentral ()
 *     }
 *
 *     dependencies {
 *         classpath "org.freemarker:freemarker:$freemarkerVersion"
 *         classpath "org.pegdown:pegdown:$pegdownVersion"
 *         classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
 *         classpath "org.jbake:jbake-core:$jbakeVersion"
 *         classpath "me.champeau.gradle:jbake-gradle-plugin:$jbakepluginVersion"
 *     }
 * }
 *
 * NOTE: Site generation does not work well with Gradle daemon.
 * execute it this way: gw --no-daemon clean site
 *
 * NOTE: For image rendering you will need 'rsvg' and 'imagemagick' installed in the development
 * machine.
 *
 * TODO Site processing will be deprecated when JBake filters content with configuration properties
 */

apply plugin: 'jacoco'
apply plugin: 'me.champeau.jbake'

ext.projectSite = "site"

ext.sitePublicDir = "$buildDir/$projectSite"
ext.siteImagesDir = "$sitePublicDir/img"

ext.logoNoText = "$siteImagesDir/logo.svg"
ext.logoTextRight = "$siteImagesDir/logo.svg"
ext.logoTextBottom = "$siteImagesDir/logo.svg"

ext.cp = { source, destination ->
    copy {
        from source
        into destination
        include ('**')
    }
}

jbake {
    input = file("$project.projectDir/$projectSite")
    output = file("$buildDir/$projectSite")

    configuration['theme'] = bootstrapTheme
    configuration['site.host'] = siteHost

    configuration['render.index'] = false
    configuration['render.tags'] = false
    configuration['render.archive'] = false
    configuration['render.feed'] = false
    configuration['render.sitemap'] = true

    // Custom properties
    configuration['projectVersion'] = project.version // Applied in templates, not content
    configuration['bootstrapVersion'] = bootstrapVersion
    configuration['cloudflare'] = 'http://cdnjs.cloudflare.com/ajax/libs'
    configuration['googlefonts'] = 'http://fonts.googleapis.com/css?family'
}

task site (dependsOn: [ 'check', 'jbake', 'jacocoTestReport', 'dokka' ]) << {
    file ("$buildDir/$projectSite/").renameTo (file ("$buildDir/${projectSite}.orig/"))
    cp "$buildDir/${projectSite}.orig/", "$buildDir/$projectSite"
    copy {
        from "$buildDir/${projectSite}.orig/"
        into "$buildDir/$projectSite"
        include ('**/*.html')
        filter {ln -> ln.replace ('${projectVersion}', project.version)}
    }
    delete "$buildDir/${projectSite}.orig/"

    try {
        createIco (logoNoText, "favicon.ico", 16, 32, 48, 64)
        extendImage (logoNoText, "180x180", 180, "apple-touch-icon.png")
        extendImage (logoNoText, "128x128", 128, "tile-small.png")
        extendImage (logoTextBottom, "270x270", 270, "tile-medium.png")
        extendImage (logoTextRight, "558x270", 558, "tile-wide.png")
        extendImage (logoTextBottom, "558x558", 558, "tile-large.png")

        // Sanity
        [16, 32, 48, 64, 128, 180, 270, 558].each {
            new File ("$sitePublicDir/_${it}.png").delete ()
        }
    }
    catch (Exception e) {
        println """
            --------------------------------------------------------------------------------------
            Icons generation does not work in TravisCI because of the lack of 'rsvg' and 'convert'
            --------------------------------------------------------------------------------------
            """
    }
}

private int execute (String command) {
    Process process = command.execute ()
    int result = process.waitFor ()

    if (result != 0) {
        StringBuilder out = new StringBuilder ()
        StringBuilder err = new StringBuilder ()
        process.consumeProcessOutput (out, err)
        println "$command -> [$result] $out $err"
    }

    return result
}

private void rasterSvg (String svg, int... widths) {
    widths.each { execute "rsvg-convert -w $it -o $sitePublicDir/_${it}.png $svg" }
}

private void createIco (String svg, String ico, int... widths) {
    widths.each { extendImage svg, "${it}x${it}", it, "_${it}.png" }
    List<String> images = widths.collect { "$sitePublicDir/_${it}.png" }
    execute "convert ${images.join (" ")} $sitePublicDir/$ico"
}

private void extendImage (String bg = "white", String svg, String size, int width, String file) {
    rasterSvg svg, width
    String input = "$sitePublicDir/_${width}.png"
    String output = "$sitePublicDir/$file"
    execute "convert -gravity center -background $bg -extent $size $input $output"
}
