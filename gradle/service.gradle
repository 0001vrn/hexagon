
apply plugin: 'application'

defaultTasks 'install'

ext.deployDir = findProperty ('deployDir') ?: '/opt'
ext.serviceUser = findProperty ('serviceUser') ?: 'root'
ext.serviceGroup = findProperty ('serviceGroup') ?: serviceUser

File projectDestinationDir = file("$rootProject.buildDir/$project.name")

jar {
    manifest {
        attributes(
            "hexagon": "service",
            "project": rootProject.name,
            "module": project.name,
            "version": project.version
        )
    }
}

startScripts {
    String template = new URL ("$gradleScripts/startScript").text
    println unixStartScriptGenerator.template // TODO Print start script
    unixStartScriptGenerator.template = resources.text.fromString (template)
}

installDist.destinationDir = projectDestinationDir
installDist.doLast {
    addScript ("${project.name}.service", "systemdScript", [
        projectName : project.name,
        projectVersion : project.version.toString(),
        projectDescription : project.description,
        deployDir : deployDir,
        serviceUser : serviceUser,
        serviceGroup : serviceGroup
    ])

    addScript ("service", "serviceScript", [
        projectName : project.name,
        projectVersion : project.version.toString()
    ])
}

task install {
    dependsOn 'check', 'installDist'
}

task runService {
    dependsOn 'processResources', 'install'
    doLast {
        exec {
            workingDir installDist.destinationDir
            commandLine "$installDist.destinationDir/bin/service", "restart"
        }
    }
}

private void addScript (String name, String template, Map<String, String> variables) {
    String content = new URL ("$gradleScripts/$template").text
    variables.each { content = content.replace ('${' + it.key + '}', it.value) }

    File script = file ("$installDist.destinationDir/bin/$name")
    script << content
    script.executable = true
}
