
apply plugin: 'application'

defaultTasks 'install'

ext.deployDir = findProperty ('deployDir') ?: '/opt'
ext.serviceUser = findProperty ('serviceUser') ?: 'root'
ext.serviceGroup = findProperty ('serviceGroup') ?: serviceUser

jar {
    manifest {
        attributes(
            "hexagon": "service",
            "project": rootProject.name,
            "module": project.name,
            "version": project.version
        )
    }
}

installDist.destinationDir = file("$rootProject.buildDir/$project.name")
installDist.doLast {
    String content = new URL ("$gradleScripts/systemdScript").text

    Map<String, String> parameters = [
        projectName : project.name,
        projectVersion : project.version.toString(),
        projectDescription : project.description,
        deployDir : deployDir,
        serviceUser : serviceUser,
        serviceGroup : serviceGroup
    ]

    parameters.each { content = content.replace ('${' + it.key + '}', it.value) }

    File script = file ("$destinationDir/bin/${project.name}.service")
    script << content
    script.executable = true
}

task install(dependsOn: [ 'check', 'installDist' ])

task runService(dependsOn: 'classes') {
    doLast {
        // NOTE: these two statements are required to load classpath and main class
        run.classpath.each { it.toString() }
        run.main.toString()

        ByteArrayOutputStream out = new ByteArrayOutputStream()
        exec {
            commandLine 'jps', '-l'
            standardOutput = out
        }
        out.toString ().readLines()
            .findAll { it.endsWith run.main }
            .collect { it.split(' ')[0] }
            .each { pid -> exec { commandLine 'kill', pid } }

        Thread.startDaemon {
            run.ignoreExitValue = true
            run.actions.each { action -> action.execute(run) }
        }
    }
}
