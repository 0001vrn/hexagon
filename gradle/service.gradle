
apply plugin: 'application'

defaultTasks 'install'

ext.deployDir = findProperty ('deployDir') ?: '/opt'
ext.serviceUser = findProperty ('serviceUser') ?: 'root'
ext.serviceGroup = findProperty ('serviceGroup') ?: serviceUser

jar {
    manifest {
        attributes(
            hexagon: "service",
            project: rootProject.name,
            module: project.name,
            version: project.version.toString(),
            group: project.group,
            description: project.description
        )
    }
}

task install(dependsOn: [ 'check', 'installDist' ]) {
    doLast {
        String content = ""

        try {
            content = new URL("$gradleScripts/systemdScript").text
        }
        catch (Exception ignored) {
            content = file("$gradleScripts/systemdScript").text
        }

        Map<String, String> parameters = [
            projectName : project.name,
            projectVersion : project.version.toString(),
            projectGroup : project.group.toString (),
            projectDescription : project.description,
            deployDir : deployDir,
            serviceUser : serviceUser,
            serviceGroup : serviceGroup
        ]

        parameters.each { content = content.replace ('${' + it.key + '}', it.value) }

        File script = file ("${tasks.installDist.destinationDir}/bin/${project.name}.service")
        script.delete ()
        script << content
        script.executable = true
    }
}

task runService(dependsOn: 'classes') {
    doLast {
        // NOTE: these two statements are required to load classpath and main class
        run.classpath.each { it.toString() }
        run.main.toString()

        ByteArrayOutputStream out = new ByteArrayOutputStream()
        exec {
            commandLine 'jps', '-l'
            standardOutput = out
        }
        out.toString ().readLines()
            .findAll { it.endsWith run.main }
            .collect { it.split(' ')[0] }
            .each { pid -> exec { commandLine 'kill', pid } }

        Thread.startDaemon {
            run.ignoreExitValue = true
            run.actions.each { action -> action.execute(run) }
        }
    }
}
