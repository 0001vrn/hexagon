/*
 * Check usage information at: http://hexagonkt.com/build_helpers/jmh.html
 */

apply plugin: 'me.champeau.gradle.jmh'

project.ext.jmhBenchmarkVersion = findProperty('jmhBenchmarkVersion') ?: '1.21'

dependencies {
    // Added for IntelliJ IDEA to compile JMH tests inside the IDE
    compileOnly ("org.openjdk.jmh:jmh-core:$jmhBenchmarkVersion")
    compileOnly ("org.openjdk.jmh:jmh-generator-annprocess:$jmhBenchmarkVersion")

    jmh ("org.openjdk.jmh:jmh-core:$jmhBenchmarkVersion")
    annotationProcessor ("org.openjdk.jmh:jmh-generator-annprocess:$jmhBenchmarkVersion")
}

jmh {
    final String projectIterations = findProjectProperty('iterations')
    final String projectBenchmarkModes = findProjectProperty('benchmarkModes')
    final String projectBatchSize = findProjectProperty('batchSize')
    final String projectFork = findProjectProperty('fork')
    final String projectOperationsPerInvocation = findProjectProperty('operationsPerInvocation')
    final String projectTimeOnIteration = findProjectProperty('timeOnIteration')
    final String projectWarmup = findProjectProperty('warmup')
    final String projectWarmupBatchSize = findProjectProperty('warmupBatchSize')
    final String projectWarmupIterations = findProjectProperty('warmupIterations')

    iterations = projectIterations.toInteger() ?: 5
    benchmarkMode = projectBenchmarkModes.split (',').collect { it.trim() } ?: [ 'all' ]
    batchSize = projectBatchSize.toInteger () ?: 1
    fork = projectFork.toInteger () ?: 1
    operationsPerInvocation = projectOperationsPerInvocation.toInteger () ?: 5
    timeOnIteration = projectTimeOnIteration ?: '1s'
    warmup = projectWarmup ?: '1s'
    warmupBatchSize = projectWarmupBatchSize.toInteger () ?: 5
    warmupIterations = projectWarmupIterations.toInteger () ?: 1

    jmhVersion = project.ext.jmhBenchmarkVersion
}

private String findProjectProperty(final String name) {
    return findProperty("$project.name${name.capitalize ()}").toString()
}
