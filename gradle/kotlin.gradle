/*
 * Kotlin development
 * For parallel test execution you need to define a property called 'testsConcurrency' with
 * parallelization type (check Gradle's parallel property)
 *
 * TODO Use outputFormat in Dokka configuration to render to markdown
 * TODO There is a bug in the tool that prevents that for working ok
 * TODO outputFormat = 'markdown'
 */

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

repositories {
    jcenter ()
    mavenLocal()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testCompile group: "org.jetbrains.kotlin", name: "kotlin-test", version: kotlinVersion
    testCompile "org.testng:testng:$testngVersion"
}

clean {
    delete fileTree(dir: projectDir , include: "*.log")
    delete "$projectDir/logs"
    delete "$buildDir"
}

processResources {
    filterPatterns.split(",").each {pattern ->
        filesMatching ("**/" + pattern.trim ()) {
            filter {
                it
                    .replace ('${projectVersion}', project.version)
                    .replace ('${projectName}', project.name)
                    .replace ('${bootstrapVersion}', bootstrapVersion)
            }
        }
    }

    doLast {
        if (file (processResources.destinationDir).exists()) {
            ant.native2ascii (
                src: "${processResources.destinationDir}",
                dest: "${processResources.destinationDir}/../ascii",
                includes: '**/*.properties',
            )

            copy {
                from "${processResources.destinationDir}/../ascii"
                into processResources.destinationDir
            }
        }
    }
}

test {
    useTestNG ()

    reports {
        html.destination = file ("${rootProject.buildDir}/$projectSite/testng/$project.name")
    }

    testLogging {
        events "skipped", "failed", "standardOut", "standardError"
    }

    if (project.ext.has ('testsConcurrency')) {
        options.parallel = testsConcurrency
        options.threadCount = Runtime.runtime.availableProcessors ()
    }
}

dokka {
    outputDirectory = "${rootProject.buildDir}/$projectSite/dokka"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = "${rootProject.buildDir}/$projectSite/jacoco/$project.name"
    }
}

task docs (dependsOn: [ 'check', 'jacocoTestReport', 'dokka' ])
