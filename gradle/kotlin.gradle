/*
 * Check usage information at: http://hexagonkt.com/gradle.html#kotlin
 */

apply(plugin: "idea")
apply(plugin: "eclipse")
apply(plugin: "kotlin")
apply(plugin: "jacoco")
apply(plugin: "maven-publish")

defaultTasks("build")

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

idea {
    module {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

eclipse {
    classpath {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion")

    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
}

// Replace build variables in resource files
processResources {
    [ "properties", "ini", "cfg", "txt", "html", "xml", "json", "yaml" ].each { String ext ->
        final Map<String, ?> stringProperties = project.getProperties()
            .findAll { it.value instanceof String }

        filesMatching("**/*.$ext") {
            filter {
                String content = it

                stringProperties.entrySet().forEach { entry ->
                    content = content.replace("\${project.${entry.key}}", entry.value.toString())
                }

                content
            }
        }
    }
}

tasks.compileKotlin.kotlinOptions.jvmTarget = targetCompatibility
tasks.compileKotlin.kotlinOptions.apiVersion = "1.3"

tasks.compileTestKotlin.kotlinOptions.jvmTarget = tasks.compileKotlin.kotlinOptions.jvmTarget
tasks.compileTestKotlin.kotlinOptions.apiVersion = tasks.compileKotlin.kotlinOptions.apiVersion

// Clean the project taking care of logs and runtime files
clean {
    delete("build", "log", "out", ".vertx", "file-uploads")

    delete(
        fileTree(rootDir) { include "**/*.log" },
        fileTree(rootDir) { include "**/*.hprof" },
        fileTree(rootDir) { include "**/.attach_pid*" },
        fileTree(rootDir) { include "**/hs_err_pid*" }
    )
}

// Show useful testing information while running tests
tasks.withType(Test).each { testTask ->
    testTask.systemProperties(project.getProperties().findAll { it.value instanceof String })

    testTask.testLogging {
        events("skipped", "failed", "standardOut", "standardError")
    }
}

test {
    exclude("**/*IT.*")
}

task("verify", dependsOn: "test", type: Test) {
    include("**/*IT.*")
}

jacoco {
    toolVersion = "0.8.4"
}

// Generate coverage reports properly
jacocoTestReport {
    dependsOn("test")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task("jarAll", type: Jar, dependsOn: "test") {
    archiveBaseName.set("${archiveBaseName.orNull}-all")
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with(jar)
}

task("sourceJar", type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource)
}

task("testJar", type: Jar, dependsOn: testClasses) {
    archiveClassifier.set("test")
    from(sourceSets.test.output.classesDirs)
}

assemble.dependsOn("jarAll", "sourceJar", "testJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            artifact(sourceJar) // To be accepted in JCenter, the package need to include sources
            artifact(testJar)
        }
    }
}
