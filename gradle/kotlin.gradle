/*
 * Kotlin development
 * For parallel test execution you need to define a property called 'testsConcurrency' with
 * parallelization type (check Gradle's parallel property)
 */

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

ext.projectSite = findProperty ('projectSite') ?: 'site'

ext.testngVersion = findProperty ('testngVersion') ?: '6.9.11' // Fixed because .12 bug in IntelliJ
ext.mockitoVersion = findProperty ('mockitoVersion') ?: '1.10.+'
ext.powermockVersion = findProperty ('powermockVersion') ?: '1.6.+'

ext.filterPatterns = findProperty ('filterPatterns') ?: '*.properties, *.txt, *.xml'
ext.rootBuildDir = rootProject.buildDir

repositories {
    jcenter ()
    mavenCentral ()
    mavenLocal ()
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: kotlinVersion
    testCompile group: 'org.testng', name: 'testng', version: testngVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.powermock', name: 'powermock', version: powermockVersion
}

clean {
    delete fileTree (dir: projectDir , include: '*.log')
    delete "$projectDir/logs"
}

processResources {
    filterPatterns.split(',').each {pattern ->
        filesMatching ('**/' + pattern.trim ()) {
            filter {
                it
                    .replace ('${projectVersion}', project.version)
                    .replace ('${projectName}', project.name)
            }
        }
    }
}

test {
    useTestNG ()

    reports {
        html.destination = file ("$rootBuildDir/$projectSite/testng/$project.name")
    }

    testLogging {
        if (System.getProperty ('showOutput') != null)
            events 'skipped', 'failed', 'standardOut', 'standardError'
        else
            events 'skipped', 'failed'
    }

    if (project.ext.has ('testsConcurrency')) {
        options.parallel = testsConcurrency
        options.threadCount = Runtime.runtime.availableProcessors ()
    }
}

dokka {
    outputDirectory = "$rootBuildDir/$projectSite/dokka/$project.name"
    outputFormat = 'javadoc'
}

jacocoTestReport {
    dependsOn "test"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = "$rootBuildDir/$projectSite/jacoco/$project.name"
    }
}
