/*
 * Kotlin development
 * For parallel test execution you need to define a property called 'testsConcurrency' with
 * parallelization type (check Gradle's parallel property)
 */

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

ext.projectSite = findProperty ('projectSite') ?: 'site'
ext.sitePublicDir = findProperty ('sitePublicDir') ?: "build/$projectSite"

ext.testngVersion = findProperty ('testngVersion') ?: '6.9.13.6'
ext.mockitoVersion = findProperty ('mockitoVersion') ?: '2.2.8'
ext.powermockVersion = findProperty ('powermockVersion') ?: '1.6.5'

ext.filterPatterns = findProperty ('filterPatterns') ?: '*.properties, *.txt, *.xml'
ext.rootBuildDir = rootProject.buildDir

repositories {
    jcenter ()
    mavenCentral ()
    mavenLocal ()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.powermock:powermock-module-testng:$powermockVersion"
    testCompile "org.powermock:powermock-module-test-mockito-testng:$powermockVersion"
}

processResources {
    filterPatterns.split(',').each {pattern ->
        filesMatching ('**/' + pattern.trim ()) {
            filter {
                it
                    .replace ('${projectVersion}', project.version)
                    .replace ('${projectName}', project.name)
            }
        }
    }
}

String reportsDir = "$project.rootDir/$sitePublicDir"

test {
    useTestNG ()

    reports {
        html.destination = "$reportsDir/testng/$project.name"
    }

    testLogging {
        if (System.getProperty ('showOutput') != null)
            events 'skipped', 'failed', 'standardOut', 'standardError'
        else
            events 'skipped', 'failed'
    }

    if (project.ext.has ('testsConcurrency')) {
        options.parallel = testsConcurrency
        options.threadCount = Runtime.runtime.availableProcessors ()
    }
}

dokka {
    outputDirectory = "$reportsDir/dokka/$project.name"
    outputFormat = 'javadoc'
}

jacocoTestReport {
    dependsOn "test"
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = "$reportsDir/jacoco/$project.name"
    }
}
