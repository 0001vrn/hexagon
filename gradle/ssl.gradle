
final String CA_FILE = "ca.p12"
final String CA_ALIAS = "ca"
final String TRUST_FILE = "trust_store.p12"

task("createCa") {
    doLast {
        if (file(sslPath(CA_FILE)).exists())
            return

        final String sslValidity = findProperty("sslValidity") ?: 365.toString()
        final String sslCountry = findProperty("sslCountry") ?: System.getProperty("user.country")
        final String sslOrganization = findProperty("sslOrganization")

        final String caPem = sslPath("ca.pem")

        // Create CA (root) key pair
        keytool("-genkeypair", CA_FILE, CA_ALIAS,
            "-validity", sslValidity,
            "-ext", "bc:ca:true",
            "-keyalg", "RSA",
            "-dname", "CN=${sslOrganization} TEST Root CA,O=${sslOrganization},C=${sslCountry}"
        )

        // Export CA certificate (PEM)
        keytool("-exportcert", CA_FILE, CA_ALIAS, "-rfc", "-file", caPem)

        // Create trust store with CA certificate (PEM)
        keytool("-importcert", TRUST_FILE, CA_ALIAS, "-file", caPem, "-noprompt")

        // Clean up
        delete(caPem)
    }
}

task("createIdentity", dependsOn: "createCa") {
    doLast {
        final String sslValidity = findProperty("sslValidity") ?: 365.toString()
        final String sslCountry = findProperty("sslCountry") ?: System.getProperty("user.country")
        final String sslOrganization = findProperty("sslOrganization")
        final String sslDomain = findProperty("sslDomain").toString().trim()
        final String sslSubdomains = findProperty("sslSubdomains")?.toString()?.trim()

        final String caPem = sslPath("ca.pem")
        final String identityCsr = sslPath("identity.csr")
        final String identityPem = sslPath("identity.pem")
        final String identityChainPem = sslPath("identity_chain.pem")

        final int dotIndex = sslDomain.lastIndexOf('.')
        final String domain = sslDomain.substring(0, dotIndex)
        final String tld = sslDomain.substring(dotIndex + 1)
        final List<String> sslSubdomainsList = sslSubdomains?.split(",")?.toList() ?: []
        final String storeFile = domain.replace(".", "_") + "_store.p12"

        if (file(sslPath(storeFile)).exists())
            return

        final List<String> subdomains = sslSubdomainsList
            .collect { it.trim() }
            .collect { subdomain ->
                [ "test", tld ].collect { "${subdomain}.${domain}.${it}" }
            }
            .flatten()
            .collect { it as String }

        final List<String> allSubdomains = subdomains + [ "${domain}.test", "localhost" ]
        final List<String> fullSubdomains = allSubdomains.collect { "dns:${it}".toString() }
        final String san = fullSubdomains.join(",")

        // Create server key pair
        keytool("-genkeypair", storeFile, domain,
            "-validity", sslValidity,
            "-keyalg", "RSA",
            "-dname", "CN=${sslDomain},O=${sslOrganization},C=${sslCountry}"
        )

        // Server certificate signing request
        keytool("-certreq", storeFile, domain, "-ext", "san=${san}", "-file", identityCsr)

        // Server certificate sign
        keytool("-gencert", CA_FILE, CA_ALIAS,
            "-validity", sslValidity,
            "-ext", "san=${san}",
            "-rfc",
            "-infile", identityCsr,
            "-outfile", identityPem
        )

        // Export CA certificate (PEM)
        keytool("-exportcert", CA_FILE, CA_ALIAS, "-rfc", "-file", caPem)
        concatenate(identityChainPem, caPem, identityPem)

        // Replace server certificate
        keytool("-importcert", storeFile, domain, "-file", identityChainPem, "-noprompt")

        // Clean up
        delete(identityCsr, caPem, identityPem, identityChainPem)
    }
}

private void concatenate(final String output, final String... files) {
    final File chain = project.file(output)
    project.files(files).each { chain << it.text }
}

private String sslPath(final String fileName) {
    final String sslPath = findProperty("sslPath")

    if (sslPath == null)
        return project.buildDir.absolutePath + "/" + fileName

    final List<String> pathSegments = [ projectDir.absolutePath, sslPath, fileName ]
    return pathSegments.findAll { !it.isBlank() }.join("/")
}

private void keytool(
    final String command,
    final String keystore,
    final String alias,
    final Object... others) {

    final String sslPassword = findProperty("sslPassword") ?: keystore.reverse()
    final String keystorePath = sslPath(keystore)

    final List<String> commandList = [
        "keytool", command,
        "-keystore", keystorePath,
        "-storetype", "pkcs12",
        "-storepass", sslPassword,
        "-alias", alias
    ]

    final List<Object> fullCommand = commandList + others.toList()
    project.exec { commandLine(fullCommand) }
}
