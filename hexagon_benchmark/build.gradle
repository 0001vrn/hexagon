
apply(from: "../gradle/kotlin.gradle")
apply(from: "../gradle/service.gradle")
apply(from: "../gradle/testng.gradle")

apply(plugin: "scala")
apply(plugin: "war")

mainClassName = "com.hexagonkt.BenchmarkKt"

applicationDefaultJvmArgs = [ "-XX:+UseNUMA", "-XX:+UseParallelGC", "-XX:+AggressiveOpts" ]

project.ext.tfbBuildDir = project.buildDir.absolutePath + "/tfb"
project.ext.databases = [ "MongoDB", "PostgreSQL" ]
project.ext.servers = [ "Jetty", "Resin" ]
project.ext.tests = [ servers, databases ].combinations ()

war {
    archiveName = "ROOT.war"
}

installDist.dependsOn("war")

dependencies {
    implementation(project(":store_mongodb"))
    implementation(project(":http_server_jetty"))
    implementation(project(":templates_pebble"))

    implementation("com.zaxxer:HikariCP:$hikariVersion")
    implementation("org.postgresql:postgresql:$postgresqlVersion")

    testImplementation(project(":port_http_client"))
    testImplementation("io.gatling.highcharts:gatling-charts-highcharts:$gatlingVersion")
}

task("tfb", type: Copy, dependsOn: [ "gradleSettings", "benchmarkConfig", "setupDockerfiles" ]) {
    from(projectDir)
    include("src/**", "tfb.gradle", "tfb.settings.gradle", "tfb.md", "resin.xml")
    into(tfbBuildDir)
    rename("tfb.gradle", "build.gradle")
    rename("tfb.settings.gradle", "settings.gradle")
    rename("tfb.md", "README.md")
}

task("gradleSettings", type: WriteProperties) {
    Map<String, ?> settings = [
        name : "hexagon",
        description : "Hexagon web framework's benchmark",

        gradleScripts :
            "https://raw.githubusercontent.com/hexagonkt/hexagon/$rootProject.version/gradle",

        hexagonVersion : rootProject.version,
        kotlinVersion : kotlinVersion,
        kotlinCoroutinesVersion : kotlinCoroutinesVersion,
        logbackVersion : logbackVersion,

        hikariVersion : hikariVersion,
        postgresqlVersion : postgresqlVersion,
        jettyVersion : jettyVersion,

        testngVersion : testngVersion
    ]

    properties = settings
    outputFile = "$tfbBuildDir/gradle.properties"
}

import groovy.json.JsonOutput

task("benchmarkConfig") {
    doLast {
        Map<String, Object> testsMap = [:]
        tests.collect { it as List<List<String>> }.forEach {
            final String server = it[0]
            final String database = it[1]
            final String databaseEngine = database.toLowerCase()
            final String name = server == servers.first () && database == databases.first()?
                "default" : server + "-" + database
            final int port = server == "Resin"? 8080 : 9090

            testsMap[name.toLowerCase()] = [
                json_url : "/json",
                db_url : "/$databaseEngine/db",
                query_url : "/$databaseEngine/query?queries=",
                fortune_url : "/$databaseEngine/pebble/fortunes",
                update_url : "/$databaseEngine/update?queries=",
                plaintext_url : "/plaintext",

                port : port,

                approach : "Realistic",
                classification : "Micro",
                database : database == "PostgreSQL"? "postgres" : databaseEngine,
                framework : "Hexagon",
                language : "Kotlin",
                orm : "Raw",
                platform : "Servlet",
                webserver : "None",
                os : "Linux",
                database_os : "Linux",
                display_name : "Hexagon $server $database",
                notes : "http://hexagonkt.com",

                versus : "servlet"
            ]
        }

        final Map<String, ?> config = [
            framework : "hexagon",
            tests : [ testsMap ]
        ]

        final String json = JsonOutput.toJson(config)
        final File file = file("$tfbBuildDir/benchmark_config.json")

        mkdir(tfbBuildDir)
        file.createNewFile()
        file.text = JsonOutput.prettyPrint(json) + "\n"
    }
}

task("setupDockerfiles") {
    doLast {
        tests.collect { it as List<List<String>> }.forEach { final List<String> row ->
            final String server = row[0].toLowerCase()
            final String database = row[1].toLowerCase()
            final String name = row[0] == servers.first () && row[1] == databases.first()?
                "hexagon" : "hexagon-${server}-${database}"
            final File file = file("$tfbBuildDir/${name}.dockerfile")

            file.createNewFile()

            final String dockerfileBuild = """
                FROM gradle:5.4.1-jdk11 AS gradle_build
                USER root
                WORKDIR /hexagon

                COPY src src
                COPY build.gradle build.gradle
                COPY gradle.properties gradle.properties
                RUN gradle --quiet --exclude-task test
            """

            final String dockerfileRuntime = server == "resin"?
                """
                FROM openjdk:11.0.3-jre-stretch
                ENV DBSTORE $database
                ENV ${database.toUpperCase()}_DB_HOST tfb-database
                ENV RESIN http://caucho.com/download/resin-4.0.61.tar.gz
                
                WORKDIR /resin
                RUN curl -sL \$RESIN | tar xz --strip-components=1
                RUN rm -rf webapps/*
                COPY --from=gradle_build /hexagon/build/libs/ROOT.war webapps/ROOT.war
                COPY resin.xml conf/resin.xml
                CMD ["java", "-jar", "lib/resin.jar", "console"]
                """ :
                """
                FROM openjdk:11.0.3-jre-stretch
                ENV DBSTORE $database
                ENV ${database.toUpperCase()}_DB_HOST tfb-database
                ENV WEBENGINE ${server}
                ENV PROJECT hexagon

                COPY --from=gradle_build /hexagon/build/install/\$PROJECT /opt/\$PROJECT
                ENTRYPOINT /opt/\$PROJECT/bin/\$PROJECT
                """

            file.text = """
                #
                # BUILD
                #
                ${dockerfileBuild.trim()}
                
                #
                # RUNTIME
                #
                ${dockerfileRuntime.trim()}
            """.stripIndent()
        }
    }
}
