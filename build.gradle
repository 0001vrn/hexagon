
buildscript {
    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "org.freemarker:freemarker:$freemarkerVersion"
        classpath "org.pegdown:pegdown:$pegdownVersion"
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.jbake:jbake-core:$jbakeVersion"
        classpath "me.champeau.gradle:jbake-gradle-plugin:$jbakepluginVersion"

        classpath "org.ajoberstar:gradle-git:$gradlegitVersion"

        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "com.github.zafarkhaja:java-semver:$semverVersion"

        classpath "com.squareup.okhttp3:okhttp:$okhttpVersion"
    }
}

apply from: "$rootDir/gradle/site.gradle"
apply from: "$rootDir/gradle/oss.gradle"
apply from: "$rootDir/gradle/kotlin.gradle"

dependencies {
    // COMPILE
    compile "com.rabbitmq:amqp-client:$rabbitVersion"

    compile "org.mongodb:mongo-java-driver:$mongodbVersion"

    compile "ch.qos.logback:logback-classic:$logbackVersion"

    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"

    compile ("com.cronutils:cron-utils:$cronutilsVersion") { exclude module: "slf4j-api" }

    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
        exclude module: "kotlin-reflect"
    }

    compile ("io.ratpack:ratpack-core:$ratpackVersion") {
        exclude module: "slf4j-api"
        exclude module: "jackson-databind"
        exclude module: "jackson-datatype-jdk8"
        exclude module: "jackson-datatype-jsr310"
        exclude module: "jackson-dataformat-yaml"
    }

    compile ("com.mitchellbosecke:pebble:$pebbleVersion")

    // TEST
    testCompile ("org.mockito:mockito-core:$mockitoVersion")
    testCompile ("io.ratpack:ratpack-test:$ratpackVersion")
    testCompile ("org.apache.qpid:qpid-broker:0.28") {
        exclude module: "slf4j-log4j12"
        exclude module: "slf4j-api"
    }
}

String wrapperPath = "gradle"
String wrapperBaseFile = "$project.projectDir/$wrapperPath/wrapper"

wrapper {
    gradleVersion = wrapperGradleVersion
    jarFile = wrapperBaseFile + ".jar"
    scriptFile = wrapperBaseFile
}

task deleteWrapper (description: "Delete the wrapper generated files") << {
    delete wrapperBaseFile
    delete wrapperBaseFile + ".bat"
    delete wrapperBaseFile + ".jar"
    delete wrapperBaseFile + ".properties"
}

clean {
    delete fileTree(dir: rootDir , include: "*.log")
    delete "$rootProject.buildDir"
    delete "$rootDir/logs"
}

task release (dependsOn: [ 'docs', 'site', 'publish', 'publishGhPages' ])

task majorRelease (dependsOn: 'release') { prerel (); doLast { postrel ("major") } }
task minorRelease (dependsOn: 'release') { prerel (); doLast { postrel ("minor") } }
task patchRelease (dependsOn: 'release') { prerel (); doLast { postrel ("patch") } }

import com.github.zafarkhaja.semver.Version
import org.ajoberstar.grgit.*

private void prerel () {
    Version v = Version.valueOf (version)
    version = v.normalVersion

    Grgit repo = Grgit.open(file('.'))

    Status status = repo.status()
    if (!status.clean)
        throw new GradleException ("Repo not clean")

    repo.pull(remote: "origin", branch: "master")
//    try {
    repo.pull (remote: "upstream", branch: "master")
//    }
//    catch (Exception e) {
//        e.printStackTrace ()
//    }

    status = repo.status()
    if (!status.clean)
        throw new GradleException ("Repo not clean")
}

private void postrel (String type) {
    Version v = Version.valueOf (version)

    Grgit repo = Grgit.open(file('.'))

    repo.tag.add {
        name = version
        message = "$version Release"
    }

    String newVersion = null
    switch (type) {
        case "major":
            newVersion = v.incrementMajorVersion ()
            break
        case "minor":
            newVersion = v.incrementMinorVersion ()
            break
        case "patch":
            newVersion = v.incrementPatchVersion ()
            break
        default:
            throw RuntimeException ("Unsupported version change: $type")
    }

    copy {
        from "$rootDir/gradle.properties"
        into "$buildDir"
        filter { it.replace ("version=$version", "version=$newVersion") }
    }

    copy {
        from "$buildDir/gradle.properties"
        into "$rootDir"
    }

    repo.add(patterns: [ 'gradle.properties' ])
    repo.commit(message: "New development version: $newVersion")
    repo.push(remote: "origin", tags: true)

    String bintrayApi = "https://api.bintray.com/content"
    post (
        httpClient (bintrayUser, bintrayKey),
        "$bintrayApi/jamming/maven/Hexagon/$version/publish",
        "application/json"
    )
}

import static okhttp3.MediaType.parse
import static groovy.json.JsonOutput.toJson
import static okhttp3.Credentials.basic
import static HttpMethod.*

import okhttp3.OkHttpClient
import okhttp3.RequestBody
import okhttp3.Request

enum HttpMethod { GET, PUT, POST, DELETE }

private OkHttpClient httpClient (String username = "", String password = "") {
    username != null && !username.empty?
        new OkHttpClient.Builder ()
            .authenticator { route, response ->
                response.request ().newBuilder ()
                    .header ("Authorization", basic (username, password))
                    .build ()
            }
            .build () :
        new OkHttpClient ()
}

private void http (
    OkHttpClient client, HttpMethod method, String url, String type, Object content) {

    RequestBody body = RequestBody.create(
        parse("$type; charset=utf-8"),
        type.contains ("json")? toJson (content) : content.toString ()
    )

    Request.Builder request = new Request.Builder().url(url)

    switch (method) {
        case POST:
            request = request.post (body)
            break
        case PUT:
            request = request.put (body)
            break
        case GET:
        default:
            request = request.get (body)
    }

    assert client.newCall(request.build ()).execute().code in 200..300
}

private void post (
    OkHttpClient client = httpClient (),
    String url,
    String type = "text/plain",
    Object content = "") {

    http (client, POST, url, type, content)
}

private void put (
    OkHttpClient client = httpClient (), String url, String type = "text/plain", Object content) {

    http (client, PUT, url, type, content)
}
