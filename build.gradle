
buildscript {
    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "org.freemarker:freemarker:$freemarkerVersion"
        classpath "org.pegdown:pegdown:$pegdownVersion"
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.jbake:jbake-core:$jbakeVersion"
        classpath "me.champeau.gradle:jbake-gradle-plugin:$jbakepluginVersion"

        classpath "org.ajoberstar:gradle-git:$gradlegitVersion"

        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "com.github.zafarkhaja:java-semver:$semverVersion"
    }
}

apply from: "$rootDir/gradle/site.gradle"
apply from: "$rootDir/gradle/oss.gradle"
apply from: "$rootDir/gradle/kotlin.gradle"

dependencies {
    // COMPILE
    compile "com.rabbitmq:amqp-client:$rabbitVersion"

    compile "org.mongodb:mongo-java-driver:$mongodbVersion"

    compile "ch.qos.logback:logback-classic:$logbackVersion"

    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"

    compile ("com.cronutils:cron-utils:$cronutilsVersion") { exclude module: "slf4j-api" }

    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
        exclude module: "kotlin-reflect"
    }

    compile ("io.ratpack:ratpack-core:$ratpackVersion") {
        exclude module: "slf4j-api"
        exclude module: "jackson-databind"
        exclude module: "jackson-datatype-jdk8"
        exclude module: "jackson-datatype-jsr310"
        exclude module: "jackson-dataformat-yaml"
    }

    compile ("com.mitchellbosecke:pebble:$pebbleVersion")

    // TEST
    testCompile ("org.mockito:mockito-core:$mockitoVersion")
    testCompile ("io.ratpack:ratpack-test:$ratpackVersion")
    testCompile ("org.apache.qpid:qpid-broker:0.28") {
        exclude module: "slf4j-log4j12"
        exclude module: "slf4j-api"
    }
}

String wrapperPath = "gradle"
String wrapperBaseFile = "$project.projectDir/$wrapperPath/wrapper"

wrapper {
    gradleVersion = wrapperGradleVersion
    jarFile = wrapperBaseFile + ".jar"
    scriptFile = wrapperBaseFile
}

task deleteWrapper (description: "Delete the wrapper generated files") << {
    delete wrapperBaseFile
    delete wrapperBaseFile + ".bat"
    delete wrapperBaseFile + ".jar"
    delete wrapperBaseFile + ".properties"
}

clean {
    delete fileTree(dir: rootDir , include: "*.log")
    delete "$rootProject.buildDir"
    delete "$rootDir/logs"
}

task release (dependsOn: [ 'docs', 'site', 'publish', 'publishGhPages' ])

task majorRelease (dependsOn: 'release') { prerel (); doLast { postrel ("major") } }
task minorRelease (dependsOn: 'release') { prerel (); doLast { postrel ("minor") } }
task patchRelease (dependsOn: 'release') { prerel (); doLast { postrel ("patch") } }

import com.github.zafarkhaja.semver.Version
import org.ajoberstar.grgit.*

private void prerel () {
    Version v = Version.valueOf (version)
    version = v.normalVersion
}

private void postrel (String type) {
    Version v = Version.valueOf (version)

    // TODO Assure everything is comitted

    Grgit repo = Grgit.open(file('.'))
    repo.tag.add {
        name = version
        message = "$version Release"
    }

    String newVersion = null
    switch (type) {
        case "major":
            newVersion = v.incrementMajorVersion ("SNAPSHOT")
            break
        case "minor":
            newVersion = v.incrementMinorVersion ("SNAPSHOT")
            break
        case "patch":
            newVersion = v.incrementPatchVersion ("SNAPSHOT")
            break
        default:
            throw RuntimeException ("Unsupported version change: $type")
    }

    copy {
        from "$rootDir/gradle.properties"
        into "$buildDir"
        filter { it.replace ("version=$version", "version=$newVersion") }
    }

    copy {
        from "$buildDir/gradle.properties"
        into "$rootDir"
    }

    // TODO Commit version change
    // TODO Confirm in bintray
}
