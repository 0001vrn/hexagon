/*
 * For details on how to build and publish and release the project, check the
 * `site/content/contribute.md` file.
 */

import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        jcenter ()
    }

    dependencies {
        // TODO Use Dokka 0.9.14 plugin instead classpath
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.13"
        classpath "com.github.zafarkhaja:java-semver:0.9.0"
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.7.1'

    // TODO Replace by git-publish
    id 'org.ajoberstar.github-pages' version '1.7.1' apply false
    id 'com.jfrog.bintray' version '1.7.3' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.1.2-2' apply false
    id 'org.xbib.gradle.plugin.jbake' version '1.2.1' apply false
    id 'uk.co.cacoethes.lazybones-templates' version '1.2.3' apply false
    id 'me.champeau.gradle.jmh' version '0.3.1' apply false
}

version = '0.15.0'
group = 'co.there4.hexagon'
description = 'The atoms of your platform'

ext.bintrayUser = 'anonymous'
ext.bintrayKey = 'anonymous'

ext.kotlinVersion = '1.1.2-2'
ext.testngVersion = '6.11'
ext.logbackVersion = '1.2.2'

ext.grgit = Grgit.open()

apply from: 'local.gradle'

task release(dependsOn: [ 'checkGitStatus', 'publish' ]) {
    doLast {
        grgit.tag.add {
            name = version
            message = "Release $version"
        }

        grgit.push()
    }
}

task publish(
    dependsOn: [
        ':hexagon_site:publishGhPages',
        ':hexagon_templates:publishAllTemplates',
        ':hexagon_core:bintrayUpload',
        ':events_rabbitmq:bintrayUpload',
        ':server_jetty:bintrayUpload',
        ':server_servlet:bintrayUpload',
        ':templates_pebble:bintrayUpload'
    ]
)

configure([project ('events_rabbitmq')]) {
    apply from: '../gradle/kotlin.gradle'

    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    test {
        useTestNG()
    }

    task sourceJar (type: Jar) {
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            mavenJava (MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier 'sources'
                }
            }
        }
    }

    bintray {
        setKey bintrayKey
        setUser bintrayUser
        setPublications 'mavenJava'
        publish = true

        pkg {
            repo = 'maven'
            name = 'Hexagon'
            licenses = [ 'MIT' ]
            vcsUrl = 'https://github.com/jaguililla/hexagon.git'
        }
    }

    bintrayUpload.dependsOn 'build'
}

task publishLocal (dependsOn: [ 'build', 'publishToMavenLocal' ])

task checkGitStatus () {
    doLast {
        checkCleanRepository(grgit)
        grgit.pull (remote: 'origin', branch: 'master')
        checkCleanRepository(grgit)
    }
}

task major (dependsOn: 'checkGitStatus') { doLast { upgrade 'major' } }
task minor (dependsOn: 'checkGitStatus') { doLast { upgrade 'minor' } }
task patch (dependsOn: 'checkGitStatus') { doLast { upgrade 'patch' } }

static void checkCleanRepository(Grgit gitRepository) {
    if (!gitRepository.status ().clean)
        throw new GradleException ('Repository not clean')
}

void upgrade (String type) {
    //noinspection UnnecessaryQualifiedReference
    def semver = com.github.zafarkhaja.semver.Version.valueOf (version.toString())

    switch (type) {
        case "major":
            version = semver.incrementMajorVersion ()
            break
        case "minor":
            version = semver.incrementMinorVersion ()
            break
        case "patch":
            version = semver.incrementPatchVersion ()
            break
        default:
            throw new RuntimeException ("Unsupported version change: $type")
    }

    File properties = file ("$rootDir/gradle.properties")
    String version = "version=${version.toString()}"
    properties.write(properties.getText().replaceAll(/(?m)version=.*/, version))

    // TODO Commit change
}
