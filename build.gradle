/*
 * To deploy on Bintray you need to set 'bintrayUser' and 'bintrayKey' in
 * '~/.gradle/gradle.properties'.
 *
 * You should also set 'bintrayUrl' in the project's 'gradle.properties' file.
 *
 * NOTE: For the package to be accepted in JCenter, you need to include sources (sourceJar task).
 */

buildscript {
    repositories {
        jcenter ()
        mavenCentral ()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "http://dl.bintray.com/pledbrook/plugins" }
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "com.github.zafarkhaja:java-semver:$semverVersion"
        classpath "com.squareup.okhttp3:okhttp:$okhttpVersion"

        classpath "gradle.plugin.org.xbib.gradle.plugin:gradle-plugin-jbake:$jbakepluginVersion"

        classpath "uk.co.cacoethes:lazybones-gradle:$lazybonesVersion"
    }
}

apply from: "$rootDir/gradle/site.gradle"
apply from: "$rootDir/gradle/kotlin.gradle"

apply plugin: 'maven-publish'
apply plugin: "uk.co.cacoethes.lazybones-templates"

defaultTasks 'build'

ext.bintrayUser = findProperty ('bintrayUser') ?: 'anonymous'
ext.bintrayKey = findProperty ("${project.name}BintrayKey") ?: 'anonymous'

dependencies {
    // COMPILE
    compile ("com.rabbitmq:amqp-client:$rabbitVersion")
    compile ("org.mongodb:mongodb-driver:$mongodbVersion")
    compile ("ch.qos.logback:logback-classic:$logbackVersion")
    compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
    compile ("org.slf4j:jul-to-slf4j:$slf4jVersion")
    compile ("com.cronutils:cron-utils:$cronutilsVersion") { exclude module: "slf4j-api" }

    compile ("org.asynchttpclient:async-http-client:$asynchttpclientVersion")
    compile ("org.eclipse.jetty:jetty-webapp:$jettyVersion") { exclude module: "slf4j-api" }
    compile ("io.undertow:undertow-core:$undertowVersion")

    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
        exclude module: "kotlin-reflect"
    }

    compile ("com.mitchellbosecke:pebble:$pebbleVersion")
    compile ("org.jetbrains.kotlinx:kotlinx.html.jvm:$kotlinxHtmlVersion")

    // TEST
    // Version *MUST BE* 0.28 for the tests to work
    testCompile ("org.apache.qpid:qpid-broker:0.28") {
        exclude module: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "slf4j-api"
    }
}

clean {
    delete "systems/load_test.jtl", "systems/jmeter.log"
}

test {
    systemProperties['derby.stream.error.file'] = '/dev/null'
    doFirst {
        File environmentFile = file("${System.getProperty("user.home")}/.environment")
        if (!environmentFile.exists())
            environmentFile.write("DEVELOPMENT\n")
    }
}

configurations {
    deployerJars
}

task sourceJar (type: Jar) {
    from sourceSets.main.allJava
}

task packageTest (type: Jar) {
    from sourceSets.test.output

    exclude('/data')
    exclude('/public')
    exclude('/templates')
    exclude('/*.yaml')
    exclude('/*.xml')
    exclude('/*.json')
    exclude('/*.txt')
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact packageTest {
                classifier 'test'
            }
        }
    }

    repositories {
        maven {
            url bintrayUrl
            credentials {
                username bintrayUser
                password bintrayKey
            }
        }
    }
}

lazybones {
    repositoryName = "jamming/hexagon"

    repositoryUsername = "your_bintray_username"
    repositoryApiKey = "your_bintray_api_key"

    licenses = [ "MIT" ]
    vcsUrl = "https://github.com/jaguililla/hexagon"
}

site.dependsOn 'dokka', 'jacocoTestReport'
publish.dependsOn 'site'

publish.doLast {
    String bintrayApi = 'https://api.bintray.com/content'
    OkHttpClient client = httpClient (bintrayUser, bintrayKey)
    post (client, "$bintrayApi/jamming/maven/Hexagon/$version/publish")
}

task libraries(dependsOn: [ 'build', 'packageTest' ], type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task release (dependsOn: 'publish') {
    doFirst { println ("TODO Check files not committed") }
    doLast { println ("Last") }
}

task publishLocal (dependsOn: [ 'build', 'publishToMavenLocal' ])

// TODO Use task name as type
// TODO Upgrade version, Commit, tag and push (with `exec` task)
task executeRelease () {
    doLast {
        def v = Version.valueOf (version.toString ())

        String type = ""
        switch (type) {
            case "major":
                version = v.incrementMajorVersion ()
                break
            case "minor":
                version = v.incrementMinorVersion ()
                break
            case "patch":
                version = v.incrementPatchVersion ()
                break
            default:
                throw new GradleException ("Unsupported version change: $type")
        }

        copy {
            from "$rootDir/gradle.properties"
            into buildDir
            filter {it.replaceAll (/^version=.*$/, "version=$version")}
        }

        copy {
            from "$buildDir/gradle.properties"
            into rootDir
        }
    }
}

import static okhttp3.MediaType.parse
import static okhttp3.Credentials.basic
import static HttpMethod.*

import com.github.zafarkhaja.semver.Version

import okhttp3.OkHttpClient
import okhttp3.RequestBody
import okhttp3.Request

enum HttpMethod { GET, PUT, POST, DELETE }

private static OkHttpClient httpClient (String username = "", String password = "") {
    username != null && !username.empty?
        new OkHttpClient.Builder ()
            .authenticator { route, response ->
                response.request ().newBuilder ()
                    .header ('Authorization', basic (username, password))
                    .build ()
            }
            .build () :
        new OkHttpClient ()
}

private static void http (
    OkHttpClient client, HttpMethod method, String url, String type, String content) {

    RequestBody body = RequestBody.create(parse("$type; charset=utf-8"), content)
    Request.Builder request = new Request.Builder().url(url)

    switch (method) {
        case POST:
            request = request.post (body)
            break
        case PUT:
            request = request.put (body)
            break
        case GET:
        default:
            request = request.get ()
    }

    assert client.newCall(request.build ()).execute().code() in 200..300
}

private static void post (
    OkHttpClient client, String url, String type = 'text/plain', String content = '') {

    http (client, POST, url, type, content)
}

