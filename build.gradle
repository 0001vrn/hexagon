/*
 * To deploy on Bintray you need to set 'bintrayUser' and 'bintrayKey' in
 * '~/.gradle/gradle.properties'.
 *
 * You should also set 'bintrayUrl' in the project's 'gradle.properties' file.
 *
 * NOTE: For the package to be accepted in JCenter, you need to include sources (sourceJar task).
 */
buildscript {
    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.zafarkhaja:java-semver:$semverVersion"
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '1.6.0'
    id 'org.ajoberstar.github-pages' version '1.6.0'
    id 'org.xbib.gradle.plugin.jbake' version '1.2.1'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'uk.co.cacoethes.lazybones-templates' version '1.2.3'
}

apply from: 'gradle/site.gradle'
apply from: 'gradle/kotlin.gradle'

apply plugin: 'maven-publish'

defaultTasks 'build'

ext.bintrayUser = findProperty ('bintrayUser') ?: 'anonymous'
ext.bintrayKey = findProperty ("${project.name}BintrayKey") ?: 'anonymous'

githubPages {
    pages {
        from siteTarget
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = [ 'mavenJava' ]

    pkg {
        repo = 'maven'
        name = 'Hexagon'
        licenses = [ 'MIT' ]
        vcsUrl = 'https://github.com/jaguililla/hexagon.git'
    }

    version {
        name = project.version.toString ()
        released  = new Date()
        vcsTag = project.version.toString ()
    }
}

dependencies {
    // COMPILE
    compile ("com.rabbitmq:amqp-client:$rabbitVersion") // TODO Set as 'compileOnly'
    compile ("org.mongodb:mongodb-driver:$mongodbVersion") // TODO Set as 'compileOnly'
    compile ("ch.qos.logback:logback-classic:$logbackVersion")
    compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion")
    compile ("org.slf4j:jul-to-slf4j:$slf4jVersion")
    compile ("com.cronutils:cron-utils:$cronutilsVersion") { exclude module: "slf4j-api" }

    compile ("org.asynchttpclient:async-http-client:$asynchttpclientVersion")
    compileOnly ("org.eclipse.jetty:jetty-webapp:$jettyVersion") { exclude module: "slf4j-api" }
    compileOnly ("io.undertow:undertow-core:$undertowVersion")

    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion")
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
        exclude module: "kotlin-reflect"
    }

    compileOnly ("com.mitchellbosecke:pebble:$pebbleVersion")
    compileOnly ("org.jetbrains.kotlinx:kotlinx.html.jvm:$kotlinxHtmlVersion")

    // TEST
    testCompile ("org.eclipse.jetty:jetty-webapp:$jettyVersion") { exclude module: "slf4j-api" }
    testCompile ("com.mitchellbosecke:pebble:$pebbleVersion")
    testCompile ("io.undertow:undertow-core:$undertowVersion")
    testCompile ("org.jetbrains.kotlinx:kotlinx.html.jvm:$kotlinxHtmlVersion")
    testCompile ("org.apache.qpid:qpid-broker:0.28") { // Version *MUST BE* 0.28 for tests to work
        exclude module: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "slf4j-api"
    }
}

clean {
    delete "systems/load_test.jtl", "systems/jmeter.log"
}

test {
    systemProperties['derby.stream.error.file'] = '/dev/null'
    doFirst {
        File environmentFile = file("${System.getProperty("user.home")}/.environment")
        if (!environmentFile.exists())
            environmentFile.write("DEVELOPMENT\n")
    }
}

configurations {
    deployerJars
}

task sourceJar (type: Jar) {
    from sourceSets.main.allJava
}

task packageTest (type: Jar) {
    from sourceSets.test.output

    exclude('/data')
    exclude('/public')
    exclude('/templates')
    exclude('/*.yaml')
    exclude('/*.xml')
    exclude('/*.json')
    exclude('/*.txt')
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact packageTest {
                classifier 'test'
            }
        }
    }
}

lazybones {
    repositoryName = "$bintrayUser/maven/Hexagon"

    repositoryUsername = bintrayUser
    repositoryApiKey = bintrayKey

    licenses = [ 'MIT' ]
}

task libraries(dependsOn: [ 'build', 'packageTest' ], type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

site.dependsOn 'dokka', 'jacocoTestReport'
publish.dependsOn 'site'

task release(dependsOn: 'publish', 'publishGhPages') {
    doLast {
        println ">>> check status"
        println ">>> tag"
        println ">>> push"
    }
}

task publishLocal (dependsOn: [ 'build', 'publishToMavenLocal' ])
