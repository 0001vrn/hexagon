/*
 * For details on how to build and publish and release the project, check `contributing.md`.
 */

buildscript {
    repositories { jcenter () }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.14'
    }
}

plugins {
    // TODO Replace by git-publish
    id 'org.ajoberstar.github-pages' version '1.7.2' apply false
    id 'com.jfrog.bintray' version '1.7.3' apply false
    id 'org.xbib.gradle.plugin.jbake' version '1.2.1' apply false
    id 'uk.co.cacoethes.lazybones-templates' version '1.2.3' apply false
    id 'me.champeau.gradle.jmh' version '0.3.1' apply false
}

apply plugin: 'kotlin'
apply plugin: 'jacoco'

apply from: 'local.gradle'
apply from: 'gradle/release.gradle'

task publish(
    dependsOn: [
        ':hexagon_site:publishGhPages',
        ':hexagon_templates:publishAllTemplates',
        ':hexagon_core:bintrayUpload',
        ':events_rabbitmq:bintrayUpload',
        ':server_jetty:bintrayUpload',
        ':server_servlet:bintrayUpload',
        ':templates_pebble:bintrayUpload'
    ]
)

task publishLocal (dependsOn: [ 'build', 'publishToMavenLocal' ])

apply plugin: 'jacoco'

repositories {
    jcenter ()
}

task jacocoMerge(dependsOn: getTasksByName ('test', true), type: JacocoMerge) {
    executionData fileTree (rootDir).include ('**/build/jacoco/*.exec')
}

task jacocoReport(dependsOn: jacocoMerge, type: JacocoReport) {
    sourceDirectories = files(subprojects.collectMany { it.sourceSets.main.allSource.srcDirs })
    // TODO Replace by method that filter modules
    classDirectories = files(
        rootDir.absolutePath + '/hexagon_core/build/classes/main',
        rootDir.absolutePath + '/hexagon_test/build/classes/main',
        rootDir.absolutePath + '/hexagon_benchmark/build/classes/main',
        rootDir.absolutePath + '/events_rabbitmq/build/classes/main',
        rootDir.absolutePath + '/server_servlet/build/classes/main',
        rootDir.absolutePath + '/server_jetty/build/classes/main',
        rootDir.absolutePath + '/server_undertow/build/classes/main',
        rootDir.absolutePath + '/templates_pebble/build/classes/main',
        rootDir.absolutePath + '/templates_kotlinx/build/classes/main'
    )

    executionData = files(jacocoMerge.destinationFile)

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

ext.logoSmall = 'hexagon_site/logo_code.svg'
ext.logoWide = 'hexagon_site/logo_code.svg'
ext.logoLarge = 'hexagon_site/logo_code.svg'
ext.siteTarget = 'build'

/*
 * NOTE: For image rendering you will need 'rsvg' (librsvg2-bin) and 'imagemagick' installed in the
 * development machine.
 */
task icons {
    doLast {
        try {
            createIco ((String)logoSmall, 'favicon.ico', 16, 32, 48, 64)
            extendImage ((String)logoSmall, '180x180', 180, 'apple-touch-icon.png')
            extendImage ((String)logoSmall, '128x128', 128, 'tile-small.png')
            extendImage ((String)logoLarge, '270x270', 270, 'tile-medium.png')
            extendImage ((String)logoWide, '558x270', 558, 'tile-wide.png')
            extendImage ((String)logoLarge, '558x558', 558, 'tile-large.png')

            // Sanity
            [ 16, 32, 48, 64, 128, 180, 270, 558 ].each {
                new File ("$siteTarget/_${it}.png").delete ()
            }
        }
        catch (Exception e) {
            logger.error (e.message)
        }
    }
}

private void rasterSvg (String svg, int... widths) {
    widths.each { w ->
        exec { commandLine 'rsvg-convert', '-w', w, '-o', "$siteTarget/_${w}.png", svg }
    }
}

private void createIco (String svg, String ico, int... widths) {
    widths.each { extendImage svg, "${it}x${it}", it, "_${it}.png" }
    List<String> images = widths.collect { "$siteTarget/_${it}.png" }
    List<String> cmd = ['convert', images, "$siteTarget/$ico" ].flatten()
    exec { commandLine cmd }
}

private void extendImage (String bg = 'white', String svg, String size, int width, String file) {
    rasterSvg svg, width
    String src = "$siteTarget/_${width}.png"
    String dest = "$siteTarget/$file"
    exec {
        commandLine 'convert', '-gravity', 'center', '-background', bg, '-extent', size, src, dest
    }
}
