/*
 * For details on how to build and publish and release the project, check the
 * `site/content/contribute.md` file.
 */

buildscript {
    repositories {
        jcenter ()
    }

    dependencies {
        // TODO Use Dokka 0.9.14 plugin instead classpath
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "com.github.zafarkhaja:java-semver:$semverVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.1.2'
    id 'org.ajoberstar.grgit' version '1.7.1'
    // TODO Replace by git-publish
    id 'org.ajoberstar.github-pages' version '1.7.1'
    id 'org.xbib.gradle.plugin.jbake' version '1.2.1'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'uk.co.cacoethes.lazybones-templates' version '1.2.3'
    id 'me.champeau.gradle.jmh' version '0.3.1'
}

apply from: 'gradle/site.gradle'
apply from: 'gradle/kotlin.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

dependencies {
    // COMPILE
    compile ("org.slf4j:slf4j-api:$slf4jVersion")
    compile ("org.slf4j:jcl-over-slf4j:$slf4jVersion") { exclude module: "slf4j-api" }
    compile ("org.slf4j:jul-to-slf4j:$slf4jVersion") { exclude module: "slf4j-api" }
    compile ("com.cronutils:cron-utils:$cronutilsVersion") { exclude module: "slf4j-api" }
    compile ("org.asynchttpclient:async-http-client:$ahcVersion") { exclude module: "slf4j-api" }

    compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion") {
        exclude module: "kotlin-reflect"
    }

    compileOnly ("org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion") {
        exclude module: "kotlin-stdlib"
    }

    compileOnly ("com.rabbitmq:amqp-client:$rabbitVersion") { exclude module: "slf4j-api" }
    compileOnly ("org.mongodb:mongodb-driver:$mongodbVersion")

    compileOnly ("org.eclipse.jetty:jetty-webapp:$jettyVersion") { exclude module: "slf4j-api" }

    compileOnly ("com.mitchellbosecke:pebble:$pebbleVersion") { exclude module: "slf4j-api" }
    compileOnly ("org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinxHtmlVersion") {
        exclude module: "kotlin-stdlib"
    }

    // TEST
    testCompile ("org.testng:testng:$testngVersion")
    testCompile ("ch.qos.logback:logback-classic:$logbackVersion") { exclude module: "slf4j-api" }
    testCompile ("org.mongodb:mongodb-driver:$mongodbVersion")
    testCompile ("com.rabbitmq:amqp-client:$rabbitVersion") { exclude module: "slf4j-api" }
    testCompile ("org.eclipse.jetty:jetty-webapp:$jettyVersion") { exclude module: "slf4j-api" }
    testCompile ("com.mitchellbosecke:pebble:$pebbleVersion") { exclude module: "slf4j-api" }
    testCompile ("org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinxHtmlVersion") {
        exclude module: "kotlin-stdlib"
    }
    testCompile ("org.apache.qpid:qpid-broker:0.28") { // Version *MUST BE* 0.28 for tests to work
        exclude module: "commons-logging"
        exclude module: "slf4j-log4j12"
        exclude module: "slf4j-api"
        exclude module: "guava"
    }

    // BENCHMARK
    jmh ("org.openjdk.jmh:jmh-core:$jmhVersion")
    jmh ("org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion")
    jmh ("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
}

test {
    useTestNG ()

    doFirst {
        File environmentFile = file("${System.getProperty("user.home")}/.environment")
        if (!environmentFile.exists())
            environmentFile.write("DEVELOPMENT\n")
    }
}

configurations {
    deployerJars
}

task sourceJar (type: Jar) {
    from sourceSets.main.allJava
}

task packageTest (type: Jar) {
    from sourceSets.test.output

    exclude '/data', '/public', '/templates', '/*.yaml', '/*.xml', '/*.json', '/*.txt'
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact packageTest {
                classifier 'test'
            }
        }
    }
}

githubPages {
    pages {
        from "$buildDir/site"
    }
}

// TODO Use `bintray.user/key` in lazybones, instead `ext` variables (move this to bintray block)
ext.bintrayUser = findProperty ('bintrayUser') ?: 'anonymous'
ext.bintrayKey = findProperty ("${project.name}BintrayKey") ?: 'anonymous'

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = [ 'mavenJava' ]
    publish = true

    pkg {
        repo = 'maven'
        name = 'Hexagon'
        licenses = [ 'MIT' ]
        vcsUrl = 'https://github.com/jaguililla/hexagon.git'
    }
}

// TODO Write version to template `VERSION` file
// TODO Replace version in template `gradle.properties`
lazybones {
    repositoryName = "$bintrayUser/maven"
    publish = true

    repositoryUsername = bintrayUser
    repositoryApiKey = bintrayKey

    licenses = [ 'MIT' ]
}

task libraries(dependsOn: [ 'build', 'packageTest' ], type: Copy) {
    into "$buildDir/libs"
    from configurations.compileOnly
}

site.dependsOn 'dokka', 'jacocoTestReport'
publishGhPages.dependsOn 'site'
bintrayUpload.dependsOn 'build'
publish.dependsOn 'publishGhPages', 'bintrayUpload', 'publishAllTemplates'

task release(dependsOn: [ 'checkGitStatus', 'publish', 'libraries', 'installAllTemplates' ]) {
    doLast {
        grgit.tag.add {
            name = version
            message = "Release $version"
        }

        grgit.push()
    }
}

task publishLocal (dependsOn: [ 'build', 'publishToMavenLocal' ])

task checkGitStatus () {
    doLast {
        checkCleanRepository()
        grgit.pull (remote: 'origin', branch: 'master')
        checkCleanRepository()
    }
}

task major (dependsOn: 'checkGitStatus') { doLast { upgrade 'major' } }
task minor (dependsOn: 'checkGitStatus') { doLast { upgrade 'minor' } }
task patch (dependsOn: 'checkGitStatus') { doLast { upgrade 'patch' } }

static void checkCleanRepository() {
    if (!grgit.status ().clean)
        throw new GradleException ('Repository not clean')
}

void upgrade (String type) {
    //noinspection UnnecessaryQualifiedReference
    def semver = com.github.zafarkhaja.semver.Version.valueOf (version.toString())

    switch (type) {
        case "major":
            version = semver.incrementMajorVersion ()
            break
        case "minor":
            version = semver.incrementMinorVersion ()
            break
        case "patch":
            version = semver.incrementPatchVersion ()
            break
        default:
            throw new RuntimeException ("Unsupported version change: $type")
    }

    File properties = file ("$rootDir/gradle.properties")
    String version = "version=${version.toString()}"
    properties.write(properties.getText().replaceAll(/(?m)version=.*/, version))

    // TODO Commit change
}
